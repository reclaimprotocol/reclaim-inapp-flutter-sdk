// Copyright 2025, Reclaim Protocol. Use of this source code is governed by a license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data'
    show
        Float64List,
        Int32List,
        Int64List,
        Uint8List;

import 'package:flutter/foundation.dart'
    show
        ReadBuffer,
        WriteBuffer;
import 'package:flutter/services.dart';

PlatformException
    _createConnectionError(
        String channelName) {
  return PlatformException(
    code:
        'channel-error',
    message:
        'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse(
    {Object?
        result,
    PlatformException?
        error,
    bool empty =
        false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error ==
      null) {
    return <Object?>[
      result
    ];
  }
  return <Object?>[
    error
        .code,
    error
        .message,
    error
        .details
  ];
}

bool _deepEquals(
    Object?
        a,
    Object?
        b) {
  if (a is List &&
      b is List) {
    return a.length == b.length &&
        a.indexed.every(((
                  int,
                  dynamic
                ) item) =>
            _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map &&
      b is Map) {
    return a.length == b.length &&
        a.entries.every((MapEntry<Object?, Object?> entry) => (b as Map<Object?, Object?>).containsKey(entry.key) && _deepEquals(entry.value, b[entry.key]));
  }
  return a ==
      b;
}

enum ReclaimApiVerificationExceptionType {
  unknown,
  sessionExpired,
  verificationDismissed,
  verificationFailed,
  verificationCancelled,
}

enum ReclaimSessionStatus {
  USER_STARTED_VERIFICATION,
  USER_INIT_VERIFICATION,
  PROOF_GENERATION_STARTED,
  PROOF_GENERATION_RETRY,
  PROOF_GENERATION_SUCCESS,
  PROOF_GENERATION_FAILED,
  PROOF_SUBMITTED,
  PROOF_SUBMISSION_FAILED,
  PROOF_MANUAL_VERIFICATION_SUBMITTED,
}

enum ClaimCreationTypeApi {
  standalone,
  onMeChain,
}

class ReclaimApiVerificationRequest {
  ReclaimApiVerificationRequest({
    required this.appId,
    required this.providerId,
    required this.secret,
    required this.signature,
    this.timestamp,
    required this.context,
    required this.sessionId,
    required this.parameters,
    required this.autoSubmit,
    required this.acceptAiProviders,
    this.webhookUrl,
  });

  String
      appId;

  String
      providerId;

  String
      secret;

  String
      signature;

  String?
      timestamp;

  String
      context;

  String
      sessionId;

  Map<String,
          String>
      parameters;

  bool
      autoSubmit;

  bool
      acceptAiProviders;

  String?
      webhookUrl;

  List<Object?>
      _toList() {
    return <Object?>[
      appId,
      providerId,
      secret,
      signature,
      timestamp,
      context,
      sessionId,
      parameters,
      autoSubmit,
      acceptAiProviders,
      webhookUrl,
    ];
  }

  Object
      encode() {
    return _toList();
  }

  static ReclaimApiVerificationRequest
      decode(Object result) {
    result
        as List<Object?>;
    return ReclaimApiVerificationRequest(
      appId:
          result[0]! as String,
      providerId:
          result[1]! as String,
      secret:
          result[2]! as String,
      signature:
          result[3]! as String,
      timestamp:
          result[4] as String?,
      context:
          result[5]! as String,
      sessionId:
          result[6]! as String,
      parameters:
          (result[7] as Map<Object?, Object?>?)!.cast<String, String>(),
      autoSubmit:
          result[8]! as bool,
      acceptAiProviders:
          result[9]! as bool,
      webhookUrl:
          result[10] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(
      Object
          other) {
    if (other is! ReclaimApiVerificationRequest ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(
        this,
        other)) {
      return true;
    }
    return _deepEquals(
        encode(),
        other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode =>
      Object.hashAll(_toList());
}

class ReclaimApiVerificationException {
  ReclaimApiVerificationException({
    required this.message,
    required this.stackTraceAsString,
    required this.type,
  });

  String
      message;

  String
      stackTraceAsString;

  ReclaimApiVerificationExceptionType
      type;

  List<Object?>
      _toList() {
    return <Object?>[
      message,
      stackTraceAsString,
      type,
    ];
  }

  Object
      encode() {
    return _toList();
  }

  static ReclaimApiVerificationException
      decode(Object result) {
    result
        as List<Object?>;
    return ReclaimApiVerificationException(
      message:
          result[0]! as String,
      stackTraceAsString:
          result[1]! as String,
      type:
          result[2]! as ReclaimApiVerificationExceptionType,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(
      Object
          other) {
    if (other is! ReclaimApiVerificationException ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(
        this,
        other)) {
      return true;
    }
    return _deepEquals(
        encode(),
        other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode =>
      Object.hashAll(_toList());
}

class ReclaimApiVerificationResponse {
  ReclaimApiVerificationResponse({
    required this.sessionId,
    required this.didSubmitManualVerification,
    required this.proofs,
    this.exception,
  });

  String
      sessionId;

  bool
      didSubmitManualVerification;

  List<Map<String, dynamic>>
      proofs;

  ReclaimApiVerificationException?
      exception;

  List<Object?>
      _toList() {
    return <Object?>[
      sessionId,
      didSubmitManualVerification,
      proofs,
      exception,
    ];
  }

  Object
      encode() {
    return _toList();
  }

  static ReclaimApiVerificationResponse
      decode(Object result) {
    result
        as List<Object?>;
    return ReclaimApiVerificationResponse(
      sessionId:
          result[0]! as String,
      didSubmitManualVerification:
          result[1]! as bool,
      proofs:
          (result[2] as List<Object?>?)!.cast<Map<String, dynamic>>(),
      exception:
          result[3] as ReclaimApiVerificationException?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(
      Object
          other) {
    if (other is! ReclaimApiVerificationResponse ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(
        this,
        other)) {
      return true;
    }
    return _deepEquals(
        encode(),
        other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode =>
      Object.hashAll(_toList());
}

class ClientProviderInformationOverride {
  ClientProviderInformationOverride({
    this.providerInformationUrl,
    this.providerInformationJsonString,
    required this.canFetchProviderInformationFromHost,
  });

  String?
      providerInformationUrl;

  String?
      providerInformationJsonString;

  bool
      canFetchProviderInformationFromHost;

  List<Object?>
      _toList() {
    return <Object?>[
      providerInformationUrl,
      providerInformationJsonString,
      canFetchProviderInformationFromHost,
    ];
  }

  Object
      encode() {
    return _toList();
  }

  static ClientProviderInformationOverride
      decode(Object result) {
    result
        as List<Object?>;
    return ClientProviderInformationOverride(
      providerInformationUrl:
          result[0] as String?,
      providerInformationJsonString:
          result[1] as String?,
      canFetchProviderInformationFromHost:
          result[2]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(
      Object
          other) {
    if (other is! ClientProviderInformationOverride ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(
        this,
        other)) {
      return true;
    }
    return _deepEquals(
        encode(),
        other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode =>
      Object.hashAll(_toList());
}

class ClientFeatureOverrides {
  ClientFeatureOverrides({
    this.cookiePersist,
    this.singleReclaimRequest,
    this.idleTimeThresholdForManualVerificationTrigger,
    this.sessionTimeoutForManualVerificationTrigger,
    this.attestorBrowserRpcUrl,
    this.isAIFlowEnabled,
  });

  bool?
      cookiePersist;

  bool?
      singleReclaimRequest;

  int?
      idleTimeThresholdForManualVerificationTrigger;

  int?
      sessionTimeoutForManualVerificationTrigger;

  String?
      attestorBrowserRpcUrl;

  bool?
      isAIFlowEnabled;

  List<Object?>
      _toList() {
    return <Object?>[
      cookiePersist,
      singleReclaimRequest,
      idleTimeThresholdForManualVerificationTrigger,
      sessionTimeoutForManualVerificationTrigger,
      attestorBrowserRpcUrl,
      isAIFlowEnabled,
    ];
  }

  Object
      encode() {
    return _toList();
  }

  static ClientFeatureOverrides
      decode(Object result) {
    result
        as List<Object?>;
    return ClientFeatureOverrides(
      cookiePersist:
          result[0] as bool?,
      singleReclaimRequest:
          result[1] as bool?,
      idleTimeThresholdForManualVerificationTrigger:
          result[2] as int?,
      sessionTimeoutForManualVerificationTrigger:
          result[3] as int?,
      attestorBrowserRpcUrl:
          result[4] as String?,
      isAIFlowEnabled:
          result[5] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(
      Object
          other) {
    if (other is! ClientFeatureOverrides ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(
        this,
        other)) {
      return true;
    }
    return _deepEquals(
        encode(),
        other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode =>
      Object.hashAll(_toList());
}

class ClientLogConsumerOverride {
  ClientLogConsumerOverride({
    required this.enableLogHandler,
    required this.canSdkCollectTelemetry,
    this.canSdkPrintLogs,
  });

  bool
      enableLogHandler;

  bool
      canSdkCollectTelemetry;

  bool?
      canSdkPrintLogs;

  List<Object?>
      _toList() {
    return <Object?>[
      enableLogHandler,
      canSdkCollectTelemetry,
      canSdkPrintLogs,
    ];
  }

  Object
      encode() {
    return _toList();
  }

  static ClientLogConsumerOverride
      decode(Object result) {
    result
        as List<Object?>;
    return ClientLogConsumerOverride(
      enableLogHandler:
          result[0]! as bool,
      canSdkCollectTelemetry:
          result[1]! as bool,
      canSdkPrintLogs:
          result[2] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(
      Object
          other) {
    if (other is! ClientLogConsumerOverride ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(
        this,
        other)) {
      return true;
    }
    return _deepEquals(
        encode(),
        other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode =>
      Object.hashAll(_toList());
}

class ClientReclaimSessionManagementOverride {
  ClientReclaimSessionManagementOverride({
    required this.enableSdkSessionManagement,
  });

  bool
      enableSdkSessionManagement;

  List<Object?>
      _toList() {
    return <Object?>[
      enableSdkSessionManagement,
    ];
  }

  Object
      encode() {
    return _toList();
  }

  static ClientReclaimSessionManagementOverride
      decode(Object result) {
    result
        as List<Object?>;
    return ClientReclaimSessionManagementOverride(
      enableSdkSessionManagement:
          result[0]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(
      Object
          other) {
    if (other is! ClientReclaimSessionManagementOverride ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(
        this,
        other)) {
      return true;
    }
    return _deepEquals(
        encode(),
        other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode =>
      Object.hashAll(_toList());
}

class ClientReclaimAppInfoOverride {
  ClientReclaimAppInfoOverride({
    required this.appName,
    required this.appImageUrl,
    required this.isRecurring,
  });

  String
      appName;

  String
      appImageUrl;

  bool
      isRecurring;

  List<Object?>
      _toList() {
    return <Object?>[
      appName,
      appImageUrl,
      isRecurring,
    ];
  }

  Object
      encode() {
    return _toList();
  }

  static ClientReclaimAppInfoOverride
      decode(Object result) {
    result
        as List<Object?>;
    return ClientReclaimAppInfoOverride(
      appName:
          result[0]! as String,
      appImageUrl:
          result[1]! as String,
      isRecurring:
          result[2]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(
      Object
          other) {
    if (other is! ClientReclaimAppInfoOverride ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(
        this,
        other)) {
      return true;
    }
    return _deepEquals(
        encode(),
        other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode =>
      Object.hashAll(_toList());
}

/// Identification information of a session.
class ReclaimSessionIdentityUpdate {
  ReclaimSessionIdentityUpdate({
    required this.appId,
    required this.providerId,
    required this.sessionId,
  });

  /// The application id.
  String
      appId;

  /// The provider id.
  String
      providerId;

  /// The session id.
  String
      sessionId;

  List<Object?>
      _toList() {
    return <Object?>[
      appId,
      providerId,
      sessionId,
    ];
  }

  Object
      encode() {
    return _toList();
  }

  static ReclaimSessionIdentityUpdate
      decode(Object result) {
    result
        as List<Object?>;
    return ReclaimSessionIdentityUpdate(
      appId:
          result[0]! as String,
      providerId:
          result[1]! as String,
      sessionId:
          result[2]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(
      Object
          other) {
    if (other is! ReclaimSessionIdentityUpdate ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(
        this,
        other)) {
      return true;
    }
    return _deepEquals(
        encode(),
        other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode =>
      Object.hashAll(_toList());
}

class ReclaimApiVerificationOptions {
  ReclaimApiVerificationOptions({
    required this.canDeleteCookiesBeforeVerificationStarts,
    required this.canUseAttestorAuthenticationRequest,
    required this.claimCreationType,
  });

  /// Whether to delete cookies before user journey starts in the client web view.
  /// Defaults to true.
  bool
      canDeleteCookiesBeforeVerificationStarts;

  /// Whether module can use a callback to host that returns an authentication request when a Reclaim HTTP provider is provided.
  /// Defaults to false.
  /// {@macro CreateClaimOptions.attestorAuthenticationRequest}
  bool
      canUseAttestorAuthenticationRequest;

  ClaimCreationTypeApi
      claimCreationType;

  List<Object?>
      _toList() {
    return <Object?>[
      canDeleteCookiesBeforeVerificationStarts,
      canUseAttestorAuthenticationRequest,
      claimCreationType,
    ];
  }

  Object
      encode() {
    return _toList();
  }

  static ReclaimApiVerificationOptions
      decode(Object result) {
    result
        as List<Object?>;
    return ReclaimApiVerificationOptions(
      canDeleteCookiesBeforeVerificationStarts:
          result[0]! as bool,
      canUseAttestorAuthenticationRequest:
          result[1]! as bool,
      claimCreationType:
          result[2]! as ClaimCreationTypeApi,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(
      Object
          other) {
    if (other is! ReclaimApiVerificationOptions ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(
        this,
        other)) {
      return true;
    }
    return _deepEquals(
        encode(),
        other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode =>
      Object.hashAll(_toList());
}

class _PigeonCodec
    extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(
      WriteBuffer
          buffer,
      Object?
          value) {
    if (value
        is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value
        is ReclaimApiVerificationExceptionType) {
      buffer.putUint8(129);
      writeValue(buffer,
          value.index);
    } else if (value
        is ReclaimSessionStatus) {
      buffer.putUint8(130);
      writeValue(buffer,
          value.index);
    } else if (value
        is ClaimCreationTypeApi) {
      buffer.putUint8(131);
      writeValue(buffer,
          value.index);
    } else if (value
        is ReclaimApiVerificationRequest) {
      buffer.putUint8(132);
      writeValue(buffer,
          value.encode());
    } else if (value
        is ReclaimApiVerificationException) {
      buffer.putUint8(133);
      writeValue(buffer,
          value.encode());
    } else if (value
        is ReclaimApiVerificationResponse) {
      buffer.putUint8(134);
      writeValue(buffer,
          value.encode());
    } else if (value
        is ClientProviderInformationOverride) {
      buffer.putUint8(135);
      writeValue(buffer,
          value.encode());
    } else if (value
        is ClientFeatureOverrides) {
      buffer.putUint8(136);
      writeValue(buffer,
          value.encode());
    } else if (value
        is ClientLogConsumerOverride) {
      buffer.putUint8(137);
      writeValue(buffer,
          value.encode());
    } else if (value
        is ClientReclaimSessionManagementOverride) {
      buffer.putUint8(138);
      writeValue(buffer,
          value.encode());
    } else if (value
        is ClientReclaimAppInfoOverride) {
      buffer.putUint8(139);
      writeValue(buffer,
          value.encode());
    } else if (value
        is ReclaimSessionIdentityUpdate) {
      buffer.putUint8(140);
      writeValue(buffer,
          value.encode());
    } else if (value
        is ReclaimApiVerificationOptions) {
      buffer.putUint8(141);
      writeValue(buffer,
          value.encode());
    } else {
      super.writeValue(buffer,
          value);
    }
  }

  @override
  Object? readValueOfType(
      int
          type,
      ReadBuffer
          buffer) {
    switch (
        type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ReclaimApiVerificationExceptionType.values[value];
      case 130:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ReclaimSessionStatus.values[value];
      case 131:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ClaimCreationTypeApi.values[value];
      case 132:
        return ReclaimApiVerificationRequest.decode(readValue(buffer)!);
      case 133:
        return ReclaimApiVerificationException.decode(readValue(buffer)!);
      case 134:
        return ReclaimApiVerificationResponse.decode(readValue(buffer)!);
      case 135:
        return ClientProviderInformationOverride.decode(readValue(buffer)!);
      case 136:
        return ClientFeatureOverrides.decode(readValue(buffer)!);
      case 137:
        return ClientLogConsumerOverride.decode(readValue(buffer)!);
      case 138:
        return ClientReclaimSessionManagementOverride.decode(readValue(buffer)!);
      case 139:
        return ClientReclaimAppInfoOverride.decode(readValue(buffer)!);
      case 140:
        return ReclaimSessionIdentityUpdate.decode(readValue(buffer)!);
      case 141:
        return ReclaimApiVerificationOptions.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Apis implemented by the Reclaim module for use by the host.
abstract class ReclaimModuleApi {
  static const MessageCodec<Object?>
      pigeonChannelCodec =
      _PigeonCodec();

  Future<ReclaimApiVerificationResponse>
      startVerification(ReclaimApiVerificationRequest request);

  Future<ReclaimApiVerificationResponse>
      startVerificationFromUrl(String url);

  Future<void> setOverrides(
      ClientProviderInformationOverride?
          provider,
      ClientFeatureOverrides?
          feature,
      ClientLogConsumerOverride?
          logConsumer,
      ClientReclaimSessionManagementOverride?
          sessionManagement,
      ClientReclaimAppInfoOverride?
          appInfo,
      String?
          capabilityAccessToken);

  Future<void>
      clearAllOverrides();

  Future<void>
      setVerificationOptions(ReclaimApiVerificationOptions? options);

  Future<bool>
      ping();

  static void
      setUp(
    ReclaimModuleApi?
        api, {
    BinaryMessenger?
        binaryMessenger,
    String messageChannelSuffix =
        '',
  }) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty
        ? '.$messageChannelSuffix'
        : '';
    {
      final BasicMessageChannel<Object?>
          pigeonVar_channel =
          BasicMessageChannel<Object?>('dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerification$messageChannelSuffix', pigeonChannelCodec, binaryMessenger: binaryMessenger);
      if (api ==
          null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerification was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ReclaimApiVerificationRequest? arg_request = (args[0] as ReclaimApiVerificationRequest?);
          assert(arg_request != null, 'Argument for dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerification was null, expected non-null ReclaimApiVerificationRequest.');
          try {
            final ReclaimApiVerificationResponse output = await api.startVerification(arg_request!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
          pigeonVar_channel =
          BasicMessageChannel<Object?>('dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerificationFromUrl$messageChannelSuffix', pigeonChannelCodec, binaryMessenger: binaryMessenger);
      if (api ==
          null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerificationFromUrl was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_url = (args[0] as String?);
          assert(arg_url != null, 'Argument for dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerificationFromUrl was null, expected non-null String.');
          try {
            final ReclaimApiVerificationResponse output = await api.startVerificationFromUrl(arg_url!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
          pigeonVar_channel =
          BasicMessageChannel<Object?>('dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.setOverrides$messageChannelSuffix', pigeonChannelCodec, binaryMessenger: binaryMessenger);
      if (api ==
          null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.setOverrides was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ClientProviderInformationOverride? arg_provider = (args[0] as ClientProviderInformationOverride?);
          final ClientFeatureOverrides? arg_feature = (args[1] as ClientFeatureOverrides?);
          final ClientLogConsumerOverride? arg_logConsumer = (args[2] as ClientLogConsumerOverride?);
          final ClientReclaimSessionManagementOverride? arg_sessionManagement = (args[3] as ClientReclaimSessionManagementOverride?);
          final ClientReclaimAppInfoOverride? arg_appInfo = (args[4] as ClientReclaimAppInfoOverride?);
          final String? arg_capabilityAccessToken = (args[5] as String?);
          try {
            await api.setOverrides(arg_provider, arg_feature, arg_logConsumer, arg_sessionManagement, arg_appInfo, arg_capabilityAccessToken);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
          pigeonVar_channel =
          BasicMessageChannel<Object?>('dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.clearAllOverrides$messageChannelSuffix', pigeonChannelCodec, binaryMessenger: binaryMessenger);
      if (api ==
          null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            await api.clearAllOverrides();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
          pigeonVar_channel =
          BasicMessageChannel<Object?>('dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.setVerificationOptions$messageChannelSuffix', pigeonChannelCodec, binaryMessenger: binaryMessenger);
      if (api ==
          null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.setVerificationOptions was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ReclaimApiVerificationOptions? arg_options = (args[0] as ReclaimApiVerificationOptions?);
          try {
            await api.setVerificationOptions(arg_options);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
          pigeonVar_channel =
          BasicMessageChannel<Object?>('dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.ping$messageChannelSuffix', pigeonChannelCodec, binaryMessenger: binaryMessenger);
      if (api ==
          null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            final bool output = await api.ping();
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

/// Apis implemented by the host using the Reclaim module.
class ReclaimHostOverridesApi {
  /// Constructor for [ReclaimHostOverridesApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ReclaimHostOverridesApi(
      {BinaryMessenger?
          binaryMessenger,
      String messageChannelSuffix =
          ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger?
      pigeonVar_binaryMessenger;

  static const MessageCodec<Object?>
      pigeonChannelCodec =
      _PigeonCodec();

  final String
      pigeonVar_messageChannelSuffix;

  Future<void>
      onLogs(String logJsonString) async {
    final String
        pigeonVar_channelName =
        'dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.onLogs$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?>
        pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger:
          pigeonVar_binaryMessenger,
    );
    final Future<Object?>
        pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[
      logJsonString
    ]);
    final List<Object?>?
        pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList ==
        null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length >
        1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String>
      createSession({
    required String
        appId,
    required String
        providerId,
    required String
        timestamp,
    required String
        signature,
  }) async {
    final String
        pigeonVar_channelName =
        'dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.createSession$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?>
        pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger:
          pigeonVar_binaryMessenger,
    );
    final Future<Object?>
        pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[
      appId,
      providerId,
      timestamp,
      signature
    ]);
    final List<Object?>?
        pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList ==
        null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length >
        1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] ==
        null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0]
          as String?)!;
    }
  }

  Future<bool> updateSession(
      {required String
          sessionId,
      required ReclaimSessionStatus
          status}) async {
    final String
        pigeonVar_channelName =
        'dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.updateSession$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?>
        pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger:
          pigeonVar_binaryMessenger,
    );
    final Future<Object?>
        pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[
      sessionId,
      status
    ]);
    final List<Object?>?
        pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList ==
        null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length >
        1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] ==
        null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0]
          as bool?)!;
    }
  }

  Future<void>
      logSession({
    required String
        appId,
    required String
        providerId,
    required String
        sessionId,
    required String
        logType,
    Map<String, dynamic>?
        metadata,
  }) async {
    final String
        pigeonVar_channelName =
        'dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.logSession$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?>
        pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger:
          pigeonVar_binaryMessenger,
    );
    final Future<Object?>
        pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[
      appId,
      providerId,
      sessionId,
      logType,
      metadata
    ]);
    final List<Object?>?
        pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList ==
        null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length >
        1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void>
      onSessionIdentityUpdate(ReclaimSessionIdentityUpdate? update) async {
    final String
        pigeonVar_channelName =
        'dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.onSessionIdentityUpdate$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?>
        pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger:
          pigeonVar_binaryMessenger,
    );
    final Future<Object?>
        pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[
      update
    ]);
    final List<Object?>?
        pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList ==
        null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length >
        1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String>
      fetchProviderInformation({
    required String
        appId,
    required String
        providerId,
    required String
        sessionId,
    required String
        signature,
    required String
        timestamp,
  }) async {
    final String
        pigeonVar_channelName =
        'dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.fetchProviderInformation$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?>
        pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger:
          pigeonVar_binaryMessenger,
    );
    final Future<Object?>
        pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[
      appId,
      providerId,
      sessionId,
      signature,
      timestamp
    ]);
    final List<Object?>?
        pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList ==
        null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length >
        1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] ==
        null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0]
          as String?)!;
    }
  }
}

class ReclaimHostVerificationApi {
  /// Constructor for [ReclaimHostVerificationApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ReclaimHostVerificationApi(
      {BinaryMessenger?
          binaryMessenger,
      String messageChannelSuffix =
          ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger?
      pigeonVar_binaryMessenger;

  static const MessageCodec<Object?>
      pigeonChannelCodec =
      _PigeonCodec();

  final String
      pigeonVar_messageChannelSuffix;

  Future<String>
      fetchAttestorAuthenticationRequest(Map<dynamic, dynamic> reclaimHttpProvider) async {
    final String
        pigeonVar_channelName =
        'dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostVerificationApi.fetchAttestorAuthenticationRequest$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?>
        pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger:
          pigeonVar_binaryMessenger,
    );
    final Future<Object?>
        pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[
      reclaimHttpProvider
    ]);
    final List<Object?>?
        pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList ==
        null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length >
        1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] ==
        null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0]
          as String?)!;
    }
  }
}

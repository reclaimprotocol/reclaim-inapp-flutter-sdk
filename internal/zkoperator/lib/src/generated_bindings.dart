// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/build/libgnarkprover.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class GnarkProverBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  GnarkProverBindings(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GnarkProverBindings.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
    : _lookup = lookup;

  void enforce_binding() {
    return _enforce_binding();
  }

  late final _enforce_bindingPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('enforce_binding');
  late final _enforce_binding = _enforce_bindingPtr.asFunction<void Function()>();

  void Free(ffi.Pointer pointer) {
    return _Free(pointer);
  }

  late final _FreePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>('Free');
  late final _Free = _FreePtr.asFunction<void Function(ffi.Pointer)>();

  Prove_return Prove(GoSlice params) {
    return _Prove(params);
  }

  late final _ProvePtr = _lookup<ffi.NativeFunction<Prove_return Function(GoSlice)>>('Prove');
  late final _Prove = _ProvePtr.asFunction<Prove_return Function(GoSlice)>();

  int InitAlgorithm(int algorithmID, GoSlice provingKey, GoSlice r1cs) {
    return _InitAlgorithm(algorithmID, provingKey, r1cs);
  }

  late final _InitAlgorithmPtr = _lookup<ffi.NativeFunction<GoUint8 Function(GoUint8, GoSlice, GoSlice)>>(
    'InitAlgorithm',
  );
  late final _InitAlgorithm = _InitAlgorithmPtr.asFunction<int Function(int, GoSlice, GoSlice)>();

  GenerateOPRFRequestData_return GenerateOPRFRequestData(GoSlice params) {
    return _GenerateOPRFRequestData(params);
  }

  late final _GenerateOPRFRequestDataPtr =
      _lookup<ffi.NativeFunction<GenerateOPRFRequestData_return Function(GoSlice)>>('GenerateOPRFRequestData');
  late final _GenerateOPRFRequestData =
      _GenerateOPRFRequestDataPtr.asFunction<GenerateOPRFRequestData_return Function(GoSlice)>();

  TOPRFFinalize_return TOPRFFinalize(GoSlice params) {
    return _TOPRFFinalize(params);
  }

  late final _TOPRFFinalizePtr = _lookup<ffi.NativeFunction<TOPRFFinalize_return Function(GoSlice)>>('TOPRFFinalize');
  late final _TOPRFFinalize = _TOPRFFinalizePtr.asFunction<TOPRFFinalize_return Function(GoSlice)>();
}

final class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Char> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef __darwin_ptrdiff_t = ffi.Long;
typedef Dart__darwin_ptrdiff_t = int;
typedef GoInt8 = ffi.SignedChar;
typedef DartGoInt8 = int;
typedef GoInt16 = ffi.Short;
typedef DartGoInt16 = int;
typedef GoUint16 = ffi.UnsignedShort;
typedef DartGoUint16 = int;
typedef GoInt32 = ffi.Int;
typedef DartGoInt32 = int;
typedef GoUint32 = ffi.UnsignedInt;
typedef DartGoUint32 = int;
typedef GoUint64 = ffi.UnsignedLongLong;
typedef DartGoUint64 = int;
typedef GoUint = GoUint64;
typedef GoUintptr = ffi.Size;
typedef DartGoUintptr = int;
typedef GoFloat32 = ffi.Float;
typedef DartGoFloat32 = double;
typedef GoFloat64 = ffi.Double;
typedef DartGoFloat64 = double;
typedef GoString = _GoString_;
typedef GoMap = ffi.Pointer<ffi.Void>;
typedef GoChan = ffi.Pointer<ffi.Void>;

final class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

final class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.LongLong;
typedef DartGoInt64 = int;
typedef GoUint8 = ffi.UnsignedChar;
typedef DartGoUint8 = int;

/// Return type for Prove
final class Prove_return extends ffi.Struct {
  /// proofRes
  external ffi.Pointer<ffi.Uint8> r0;

  /// resLen
  @GoInt()
  external int r1;
}

/// Return type for GenerateOPRFRequestData
final class GenerateOPRFRequestData_return extends ffi.Struct {
  /// proofRes
  external ffi.Pointer<ffi.Uint8> r0;

  /// resLen
  @GoInt()
  external int r1;
}

/// Return type for TOPRFFinalize
final class TOPRFFinalize_return extends ffi.Struct {
  /// proofRes
  external ffi.Pointer<ffi.Uint8> r0;

  /// resLen
  @GoInt()
  external int r1;
}
